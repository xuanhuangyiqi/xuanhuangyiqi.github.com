<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 推送 | Htedsv Backyard]]></title>
  <link href="http://xuanhuangyiqi.github.io/blog/categories/tui-song/atom.xml" rel="self"/>
  <link href="http://xuanhuangyiqi.github.io/"/>
  <updated>2016-05-20T23:56:10+02:00</updated>
  <id>http://xuanhuangyiqi.github.io/</id>
  <author>
    <name><![CDATA[htedsv]]></name>
    <email><![CDATA[xuanhuangyiqi@126.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[推送来电消息到桌面]]></title>
    <link href="http://xuanhuangyiqi.github.io/blog/2013/01/26/tui-song-lai-dian-xiao-xi-dao-zhuo-mian/"/>
    <updated>2013-01-26T02:08:12+01:00</updated>
    <id>http://xuanhuangyiqi.github.io/blog/2013/01/26/tui-song-lai-dian-xiao-xi-dao-zhuo-mian</id>
    <content type="html"><![CDATA[<blockquote>
  <p>Scenario 1:IT男有时候会把手机放在一个非常隐蔽的地方，然后专心致志的盯着屏幕写代码，这时来了重要电话，你却没听见。</p>
</blockquote>

<blockquote>
  <p>Scenario 2:出门匆忙，手机忘了带，又不方便回去拿，如何及时知道有谁正在给你打电话?</p>
</blockquote>

<p><img src="/images/original_ZIeB_7c5500000bcc118d.jpg"></p>

<p>于是写了以下脚本来实现推送来电信息到桌面的脚本。
<!--more--></p>

<h2 id="section">前提 环境</h2>

<ul>
  <li>mac: python(twisted), growl</li>
  <li>vps: python(twisted)</li>
  <li>android: on{X}</li>
</ul>

<h2 id="section-1">思路</h2>
<p>为了能适应更多情况，我们假设手机及电脑可能不在同一个局域网内，那么显然他们之间没有一个简单的通信方式。所以要依靠VPS，当然如果你有独立的PHP空间，并且用PHP来实现也是一样的。</p>

<p>手机：考虑到只有手机向VPS的请求，而没有反向，所以使用UDP或者http请求比较方便。单独为这个脚本写一个Android程序成本有点高，于是使用了微软的<a href="http://onx.ms/" target="_blank">on{X}</a>服务，简单地说，它是一个Android上的ifttt，用户可以自己用脚本实现“trigger-&gt;service”的功能。简单了解之后，发现on{X}的网络服务只有http请求。</p>

<p>电脑：IP及端口经常变化，而且考虑到服务器的性能，不宜轮询，遂与服务器保持TCP连接，这样服务器同时也能接受http请求（http请求在网络层就是TCP请求）。</p>

<h2 id="section-2">实现</h2>
<p>使用了python的twisted框架，以下是代码：</p>

<p>``` python Client</p>

<p>import os
import time
import urllib
from twisted.internet import reactor
from twisted.internet.protocol import Factory, Protocol
from twisted.internet.endpoints import TCP4ClientEndpoint</p>

<p>class Greeter(Protocol):
    def sendMessage(self, msg):
        self.transport.write(“%s\n” % msg)
        pass</p>

<pre><code>def dataReceived(self, msg):
    msg = urllib.unquote(msg)
    os.system("export G_TITLE=%s;growl %s"% ("From\ Your\ Phone", msg))
</code></pre>

<p>class GreeterFactory(Factory):
    def buildProtocol(self, addr):
        return Greeter()</p>

<p>def gotProtocol(p):
    pass</p>

<p>point = TCP4ClientEndpoint(reactor, “<server>", <port>)
d = point.connect(GreeterFactory())
d.addCallback(gotProtocol)
reactor.run()
```</port></server></p>

<p>``` python Server</p>

<p>from twisted.internet.protocol import Protocol, Factory
from twisted.internet.endpoints import TCP4ServerEndpoint
from twisted.internet import reactor</p>

<p>class Echo(Protocol):
    def sendMessage(self, msg):
        self.transport.write(“%s” % msg)</p>

<pre><code>def dataReceived(self, data):
    #self.transport.write(data)
    if data.startswith('GET'):
        msg = data.split('\n')[0].split(' ')[1]
        msg = msg[6:]
        for x in self.factory.protocols:
            if x != self:
                x.sendMessage(msg)
def connectionLost(self, reason):
     'lost'
    self.factory.protocols.remove(self)
</code></pre>

<p>class EFactory(Factory):
    protocol = Echo
    def <strong>init</strong>(self, quote=None):
        self.quote = quote or ‘An’
        self.protocols = []
    def buildProtocol(self, addr):
        p = self.protocol()
        p.factory = self
        self.protocols.append(p)
        return p</p>

<p>while True:
    endpoint = TCP4ServerEndpoint(reactor, <port>)
    endpoint.listen(EFactory("Ok"))
    reactor.run()</port></p>

<p>```</p>

<p><code>javascript Android
device.telephony.on('incomingCall', function (signal) 
{
    var notification = device.notifications.createNotification('Calling');
    notification.show();
    device.ajax(
    {
      url: 'http://&lt;SERVER&gt;:&lt;PORT&gt;/?msg=Call%20From:'+signal.phoneNumber,
      type: 'GET',
      headers: {
        'Content-Type': 'application/xml'
      }
    },
    function onSuccess(body, textStatus, response) {
      var parsedBody;
      if(!(body &amp;&amp; (parsedBody = JSON.parse(body)))) {
        var error = {};
        error.message = 'invalid body format';
        error.content = body;
          console.error('error: ',error);
      }
      console.info('successfully received http response!');
      notification.content = 'successfully received http response!';
      notification.show();
    },
    function onError(textStatus, response) {
      var error = {};
      error.message = textStatus;
      error.statusCode = response.status;
        console.error('error: ',error);
    });
});
</code></p>

<h2>难点</h2>
<p>值得一提的是小米的权限管理比较恶心，开始我的来电事件一直没有被捕捉到，就是因为被小米拦截了，并且没有给出任何提示。直到现在短信监听器依然不能用，应该是这部分API被锁在MIUI里面了。所以只是实现了来电提示，而没有短信提示。</p>

<p>on{X}的不提供urlencode功能，所以不能用来推送短信内容或者来电人姓名。</p>
]]></content>
  </entry>
  
</feed>
