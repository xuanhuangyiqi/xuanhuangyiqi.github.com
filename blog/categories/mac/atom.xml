<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: mac | Htedsv Backyard]]></title>
  <link href="http://xuanhuangyiqi.github.io/blog/categories/mac/atom.xml" rel="self"/>
  <link href="http://xuanhuangyiqi.github.io/"/>
  <updated>2014-01-18T16:58:45+01:00</updated>
  <id>http://xuanhuangyiqi.github.io/</id>
  <author>
    <name><![CDATA[htedsv]]></name>
    <email><![CDATA[htedsv@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Vim使用者的Evernote使用经验（仅供mac用户参考）]]></title>
    <link href="http://xuanhuangyiqi.github.io/blog/2013/01/23/vimshi-yong-zhe-de-evernoteshi-yong-jing-yan-jin-gong-macyong-hu-can-kao-/"/>
    <updated>2013-01-23T20:17:40+01:00</updated>
    <id>http://xuanhuangyiqi.github.io/blog/2013/01/23/vimshi-yong-zhe-de-evernoteshi-yong-jing-yan-jin-gong-macyong-hu-can-kao-</id>
    <content type="html"><![CDATA[<p>平时在vim下写东西比较多，很多操作vim操作都习惯了，但是缺点就是不易管理和同步，vimwiki等插件也都用过，但是很难做到evernote这么强大（尽管evernote有很多缺点，后面详述）。evernote在编辑习惯上和大多数IDE一致，而且不能像vim定制快捷键，再加上各种延迟，编辑过程很不爽，于是尝试在vim下编辑，然后同步到evernote的方案。</p>

<h1>vimrc + evernote_applescript_api</h1>

<p>在<code>~/.vimrc</code>中设置快捷键
```
map <F6> :call SaveToEN()<CR>
func SaveToEN()</p>

<pre><code>  exec "osascript /path/to/savetoen.scpt "
</code></pre>

<p>endfunc
<code>
之后编写对应的`.scpt`脚本即可。
</code>
create note title filepath with text content notebook &ldquo;回顾总结&rdquo;
```
但是问题出在Applescript的文件操作不支持中文，出现乱码，尝试各种文件操作用法均无果，没有找到合适解决方案，目测可能原因有两个：</p>

<ol>
<li>苹果开发者压根没打算会有非英语语言者使用Applescript，读写文件使用ASCII。</li>
<li>读写文件使用的是Mac自己的编码，而不是UTF8。（可能性不大）</li>
</ol>


<p>无论如何，没有必要继续尝试。</p>

<h1>vimrc+pbcopy</h1>

<p>```
func SaveToEn()</p>

<pre><code>exec "w"
exec "!cat % &gt; pbcopy"
</code></pre>

<p>endfunc
```
pbcopy是mac下的复制命令，执行这个操作之后，文件内容就进入剪切版了，在 Evernote中粘贴就好了。什么？你写markdown？看下面的方法吧</p>

<h1>vimrc + vimwiki = Markdown</h1>

<p>很多人离开Evernote是因为它不支持markdown，那么看看下面这个方法：</p>

<p>vimwiki是一个vim的插件，可以写markdown语法，然后导出成HTML文件，详细内容自行查看</p>

<p><code>
:help vimwiki
</code></p>

<p>我们的目标就是每次在vi中按下F6时打开生成的html，之后就可以轻松复制粘贴了。但是首先要能够区分什么样的文件打开html文件，什么样的直接放进剪切板，我们这里把所有.wiki的文件认为是需要用html打开的。那么下一步就是要让vim知道什么后缀的文件是wiki文件。首先要确定vim不认识这个文件。</p>

<p><code>
:echo &amp;filetype
</code></p>

<p>如果没有输出，说明确实不认识，否则的话记住这个输出，并且跳过下面这个步骤。</p>

<p>如果vim不认识这个文件，就需要修改<code>filetype.vim</code>，没有的话创建</p>

<p><code>
:echo $VIMRUNTINE
/usr/share/vim/vim73
sudo vi /usr/share/vim/vim73/filetype.vim
</code></p>

<p>添加:</p>

<p><code>
au BufNewFile,BufRead *.wiki    setf vimwiki
</code>
vimwiki的html导出路径管理不是很方便，例如要在<code>/&lt;path&gt;/vimwiki/</code>下面写wiki文件，那么html回保存在<code>/&lt;path&gt;/vimwiki_html/</code>，不是很方便，我的做法是修改<code>~/.vim/ftplugin/vimwiki.vim</code>文件第201行为
<code>
\ w &lt;bar&gt; call vimwiki#html#Wiki2HTML(expand(VimwikiGet('&lt;strong&gt;path&lt;/strong&gt;')),
</code>
这样就会在wiki的同文件夹下生成html。</p>

<p>然后再修改下vimrc
```
func SaveToEn()</p>

<pre><code>exec "w"; 
if &amp;filetype == vimwiki'
    exec &amp;quot;Vimwiki2HTML&amp;quot;
    exec &amp;quot;!open %:r.html&amp;quot;
else
    exec &amp;quot;!cat % &gt; pbcopy&amp;quot;
endif
</code></pre>

<p>endfunc
```
大功告成了！</p>
]]></content>
  </entry>
  
</feed>
